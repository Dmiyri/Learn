{"version":3,"sources":["App.module.css","Name/Tarasiuk.module.css","MySkills/MySkill.module.css","Name/Tarasiuk.jsx","Hello/SpanHello.jsx","Hello/InButHello.jsx","Hello/Hello.jsx","MySkills/MySkill.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tarasiuk","render","className","s","name","animation","React","Component","SpanHello","style","width","margin","props","count","InButHello","helloClick","newText","newHelloText","current","value","onHelloClick","ref","marginLeft","padding","onClick","createRef","Hello","border","backgroundColor","display","Skills","skill","App","state","skills","alert","setState","skillsMe","this","map","i","MySkill","app","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,sB,gBCAlDD,EAAOC,QAAU,CAAC,KAAO,uBAAuB,UAAY,4BAA4B,MAAQ,0B,mBCAhGD,EAAOC,QAAU,CAAC,MAAQ,yB,0MCaXC,E,2MATXC,OAAS,WACL,OACQ,yBAAKC,UAAWC,IAAEC,MACd,0BAAMF,UAAWC,IAAEE,WAAnB,oK,6BALGC,IAAMC,WCYdC,E,2MAXXP,OAAS,WACL,OACI,6BACI,0BAAMQ,MAAO,CAACC,MAAO,OAAQC,OAAQ,QAChC,EAAKC,MAAMC,S,6BANRP,IAAMC,WCsBfO,E,YApBX,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KAGVG,WAAa,WACT,IAAIC,EAAU,EAAKC,aAAaC,QAAQC,MACxC,EAAKF,aAAaC,QAAQC,MAAQ,GAClC,EAAKP,MAAMQ,aAAaJ,IAPT,EAUnBf,OAAS,WACL,OACI,6BACI,2BAAOoB,IAAK,EAAKJ,eACjB,4BAAQR,MAAO,CAACa,WAAY,MAAOC,QAAS,OAAQC,QAAS,EAAKT,YAAlE,WAZR,EAAKE,aAAeX,IAAMmB,YAFX,E,2BAFEnB,IAAMC,WCoBhBmB,E,2MAhBXzB,OAAS,WACL,OACI,yBAAKQ,MAAO,CACRC,MAAO,QACPiB,OAAQ,kBACRhB,OAAQ,MACRY,QAAS,MACTK,gBAAiB,SACjBC,QAAS,SAET,kBAAC,EAAD,CAAWhB,MAAO,EAAKD,MAAMC,QAC7B,kBAAC,EAAD,CAAYO,aAAc,EAAKR,MAAMQ,iB,6BAbjCd,IAAMC,W,iBCSXuB,E,2MATb7B,OAAO,WACL,OACI,yBAAKC,UAAWC,IAAE4B,OACf,EAAKnB,MAAMmB,Q,6BAJDzB,IAAMC,WC+BZyB,E,2MAzBXC,MAAQ,CACJC,OAAQ,CAAC,iFAAiB,uFAAkB,oGAC5CrB,MAAO,G,EAGXO,aAAe,SAACJ,GACZmB,MAAM,SAAD,OAAUnB,IACf,EAAKoB,SAAS,CAACvB,MAAO,EAAKoB,MAAMpB,MAAQ,K,wEAIzC,IAAIwB,EAAWC,KAAKL,MAAMC,OAAOK,KAAI,SAAAC,GAAC,OAAI,kBAACC,EAAD,CAASV,MAAOS,OAE1D,OACI,yBAAKtC,UAAWC,IAAEuC,KACd,kBAAC,EAAD,MACA,yBAAKxC,UAAWC,IAAE+B,QACbG,GAEL,kBAAC,EAAD,CAAOxB,MAAOyB,KAAKL,MAAMpB,MAAOO,aAAckB,KAAKlB,oB,GArBjDd,IAAMC,WCKJoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/C,OAAO,kBAAC,EAAD,MAASgD,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a1266afb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__32X8E\",\"skills\":\"App_skills__DiYG2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Tarasiuk_name__1Ogn8\",\"animation\":\"Tarasiuk_animation__3o-_6\",\"blink\":\"Tarasiuk_blink__C1Jx_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"skill\":\"MySkill_skill__2Z348\"};","import React from 'react';\nimport s from './Tarasiuk.module.css';\n\nclass Tarasiuk extends React.Component {\n\n    render = () => {\n        return (\n                <div className={s.name }>\n                    <span className={s.animation}>Тарасюк Дмитрий Валентинович</span>\n                </div>\n        );\n    }\n}\n\nexport default Tarasiuk;\n\n","import React from 'react';\n\nclass SpanHello extends React.Component {\n\n    render = () => {\n        return (\n            <div>\n                <span style={{width: '15px', margin: '5px'}}>\n                    {this.props.count}\n                </span>\n            </div>\n        );\n    }\n}\n\nexport default SpanHello;\n\n","import React from 'react';\n\nclass InButHello extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.newHelloText = React.createRef();\n    }\n    helloClick = () => {\n        let newText = this.newHelloText.current.value;\n        this.newHelloText.current.value = '';\n        this.props.onHelloClick(newText);\n    };\n\n    render = () => {\n        return (\n            <div>\n                <input ref={this.newHelloText}/>\n                <button style={{marginLeft: '5px', padding: '5px'}} onClick={this.helloClick}>hello</button>\n            </div>\n        );\n    }\n}\n\nexport default InButHello;\n\n","import React from 'react';\nimport SpanHello from \"./SpanHello\";\nimport InButHello from \"./InButHello\";\n\nclass Hello extends React.Component {\n\n    render = () => {\n        return (\n            <div style={{\n                width: '250px',\n                border: '1px solid black',\n                margin: '5px',\n                padding: '5px',\n                backgroundColor: 'yellow',\n                display: 'flex',\n            }}>\n                <SpanHello count={this.props.count}/>\n                <InButHello onHelloClick={this.props.onHelloClick}/>\n            </div>\n        );\n    }\n}\nexport default Hello;\n\n","import React from 'react';\nimport s from './MySkill.module.css';\n\nclass Skills extends React.Component {\n  render=()=> {\n    return (\n        <div className={s.skill}>\n          {this.props.skill}\n        </div>\n    );\n  }\n}\n\nexport default Skills;\n","import React from 'react';\nimport s from './App.module.css';\nimport Tarasiuk from \"./Name/Tarasiuk\";\nimport Hello from \"./Hello/Hello\";\nimport MySkill from \"./MySkills/MySkill\";\n\n\nclass App extends React.Component {\n\n    state = {\n        skills: [\"Ответственный\", \"Исполнительный\", \"Коммуникабельный\"],\n        count: 0,\n    }\n\n    onHelloClick = (newText) => {\n        alert(`Hello ${newText}`);\n        this.setState({count: this.state.count + 1})\n    };\n\n    render() {\n        let skillsMe = this.state.skills.map(i => <MySkill skill={i}/>);\n\n        return (\n            <div className={s.app}>\n                <Tarasiuk/>\n                <div className={s.skills}>\n                    {skillsMe}\n                </div>\n                <Hello count={this.state.count} onHelloClick={this.onHelloClick}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}